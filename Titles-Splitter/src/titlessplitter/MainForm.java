/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package titlessplitter;

import java.io.*;
import java.nio.charset.Charset;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author dmytroplekhotkin
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        fileSaver = new javax.swing.JFileChooser();
        loadTitlesButton = new javax.swing.JButton();
        titlesLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        saveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        loadTitlesButton.setText("Load titles");
        loadTitlesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadTitlesButtonActionPerformed(evt);
            }
        });

        titlesLabel.setText("No titles.");

        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        jScrollPane1.setViewportView(logTextArea);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(saveButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(loadTitlesButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(titlesLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadTitlesButton)
                    .addComponent(titlesLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(saveButton)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadTitlesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadTitlesButtonActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            titlesFile = fileChooser.getSelectedFile();
            titlesLabel.setText(titlesFile.getName());

            createTempDirectory();
            logTextArea.setText(null);

            List<String> titleList = getTitleList();

            int maxNumberOfDigits = (Integer.toString(titleList.size())).length();
            
            for (int i = 0; i < titleList.size(); i++) {
                String title = titleList.get(i);
                saveTitleToTempFile(title, String.format("title%0"+maxNumberOfDigits+"d.txt", i));
            }
        } else {
            logTextArea.append("File access cancelled by user.");
            logTextArea.append(System.lineSeparator());
        }
    }//GEN-LAST:event_loadTitlesButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        int returnVal = fileSaver.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileSaver.getSelectedFile();
            if (!fileSaver.getSelectedFile().getAbsolutePath().endsWith(".zip")) {
                fileToSave = new File(fileSaver.getSelectedFile() + ".zip");
            }

            zipResults(fileToSave);
            deleteTempFiles();

            logTextArea.append("Zip file \"" + fileToSave + "\" saved.");
            logTextArea.append(System.lineSeparator());
            //JOptionPane.showMessageDialog(null, "Results saved to " + fileToSave);
        } else {
            logTextArea.append("File save cancelled by user.");
            logTextArea.append(System.lineSeparator());
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void saveTitleToTempFile(String title, String fileName) {
        title = title.trim();

        try (PrintWriter writer = new PrintWriter(new BufferedOutputStream(
                new FileOutputStream(
                        new File(tempDirectory.getPath()
                                + File.separator
                                + fileName))))) {
                    writer.write(title);
                    logTextArea.append(title + " -> " + fileName);
                    logTextArea.append(System.lineSeparator());
                } catch (Exception ex) {
                    logTextArea.append(ex.getMessage());
                    logTextArea.append(System.lineSeparator());
                    Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                }

    }

    private static File createNonExistingFile(File file, Integer numberToAppend) {

        if (file.exists()) {
            if (numberToAppend == null) {
                numberToAppend = 1;
            } else {
                numberToAppend++;
            }
            String fileNameNoExt = file.getPath().substring(0, file.getPath().lastIndexOf("."));
            fileNameNoExt = fileNameNoExt.replace("_" + (numberToAppend - 1), "");
            String fileName = fileNameNoExt + "_" + numberToAppend + ".txt";

            file = createNonExistingFile(new File(fileName), numberToAppend);
        }

        return file;
    }

    private void zipResults(File fileToSave) {

        ZipOutputStream zipOutputStream = null;
        try {
            zipOutputStream = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(fileToSave)), Charset.forName("UTF-8"));
            String[] tempFileNames = tempDirectory.list();
            for (String tempFile : tempFileNames) {

                BufferedInputStream tempDataStream = null;
                try {
                    tempDataStream = new BufferedInputStream(new FileInputStream(tempDirectory.getPath() + File.separator + tempFile), BUFFER);
                    ZipEntry entry = new ZipEntry(fileToSave.getName().replace(".zip", "")
                            + File.separator + tempFile);
                    zipOutputStream.putNextEntry(entry);
                    int count;
                    byte data[] = new byte[BUFFER];
                    while ((count = tempDataStream.read(data, 0,
                            BUFFER)) != -1) {
                        zipOutputStream.write(data, 0, count);
                    }
                } catch (IOException ex) {
                    logTextArea.append(ex.getMessage());
                    logTextArea.append(System.lineSeparator());
                    Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    try {
                        if (tempDataStream != null) {
                            tempDataStream.close();
                        }
                    } catch (IOException ex) {
                        logTextArea.append(ex.getMessage());
                        logTextArea.append(System.lineSeparator());
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        } catch (FileNotFoundException ex) {
            logTextArea.append(ex.getMessage());
            logTextArea.append(System.lineSeparator());
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (zipOutputStream != null) {
                    zipOutputStream.close();
                }
            } catch (IOException ex) {
                logTextArea.append(ex.getMessage());
                logTextArea.append(System.lineSeparator());
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void deleteTempFiles() {
        depeteTempFiles(tempDirectory);
    }

    private void depeteTempFiles(File node) {
        if (node.exists()) {
            if (node.isDirectory()) {
                File[] childrenNodes = node.listFiles();
                for (File childNode : childrenNodes) {
                    depeteTempFiles(childNode);
                }
            } else {
                node.delete();
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    private final FileNameExtensionFilter FILTER = new FileNameExtensionFilter("Zip files", "zip", "archives");
    private static final String TEMP_DIRECTORY_NAME = "tmp";
    private static final int BUFFER = 2048;

    private File titlesFile;
    private File tempDirectory;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JFileChooser fileSaver;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadTitlesButton;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel titlesLabel;
    // End of variables declaration//GEN-END:variables

    private void createTempDirectory() {
        tempDirectory = new File(TEMP_DIRECTORY_NAME);
        if (!tempDirectory.exists()) {
            if (tempDirectory.mkdirs()) {
                System.out.println("Temp directory was created!");
            } else {
                System.out.println("Failed to create multiple directories!");
            }
        }
    }

    private List<String> getTitleList() {
        List<String> titleList = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(titlesFile))) {
            StringBuilder builder = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                builder.append(line);
            }

            String data = builder.toString();

            if (data.startsWith("{") && data.endsWith("}")) {
                data = data.substring(data.indexOf("{") + 1, data.indexOf("}"));
                String[] titles = data.split("\\|");
                titleList = Arrays.asList(titles);

            } else {
                logTextArea.append("File content is corrupted. Check " + titlesFile.getName());
                logTextArea.append(System.lineSeparator());
            }
        } catch (IOException ex) {
            logTextArea.append(ex.getMessage());
            logTextArea.append(System.lineSeparator());
        }

        return titleList;
    }
}
